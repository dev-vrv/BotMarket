import logging
import os
from aiogram import Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, InputFile
from aiogram.fsm.context import FSMContext
from database import add_subscriber, get_all_bot_db
from utils import BroadcastStates, is_admin
from handlers.messages import start_message, help_message, info_message
from config import BASE_DIR

LOGGER = logging.getLogger(__name__)



# –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def start_command(message: Message):
    user_id = message.from_user.id
    add_subscriber(user_id)
    is_admin_status = await is_admin(user_id)
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–º–æ—â—å üÜò", callback_data="help")],
        [InlineKeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚ÑπÔ∏è", callback_data="info")],
    ])
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    if is_admin_status:
        keyboard.inline_keyboard.append([InlineKeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞ üì®", callback_data="send")])
        keyboard.inline_keyboard.append([InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ üìù", callback_data="log")])

    # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ start_message(), —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç
    await message.answer(start_message(), reply_markup=keyboard)
    
    LOGGER.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
async def send_message_to_subscribers(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—Ç–µ–ª —Ä–∞–∑–æ—Å–ª–∞—Ç—å, –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    data = await state.get_data()
    message_to_send = data.get("message_to_send")  # –°–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å

    subscribers = get_all_bot_db()

    if not subscribers:
        await message.answer("–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.")
        LOGGER.info("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–µ—Ç.")
        return

    await message.answer("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –Ω–∞—á–∞–ª–∞—Å—å.")
    LOGGER.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º: {subscribers}")

    for user_id in subscribers:
        try:
            await message.bot.send_message(chat_id=user_id, text=message_to_send)
            LOGGER.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥–ø–∏—Å—á–∏–∫—É {user_id}")
        except Exception as e:
            LOGGER.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫—É {user_id}: {e}")

    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º.")

# –ö–æ–º–∞–Ω–¥–∞ /send ‚Äî –∑–∞–ø—Ä–æ—Å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
async def request_broadcast_message(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º.")
    await state.set_state(BroadcastStates.waiting_for_message_users)
    LOGGER.info("–û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
async def confirm_broadcast(message: Message, state: FSMContext):
    await state.update_data(message_to_send=message.text)

    # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ", callback_data="confirm_send")],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå", callback_data="cancel_send")]
    ])

    await message.answer("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º?", reply_markup=keyboard)
    await state.set_state(BroadcastStates.waiting_for_confirmation)
    LOGGER.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏: {message.text}")

# Callback –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã
async def handle_callback(callback_query: CallbackQuery, state: FSMContext):
    action = callback_query.data
    data = await state.get_data()
    message_to_send = data.get("message_to_send")

    if action == "confirm_send":
        await callback_query.message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        await send_message_to_subscribers(callback_query.message, state)
        await state.clear()
    elif action == "cancel_send":
        await callback_query.message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await state.clear()
    elif action == "help":
        await callback_query.message.answer(help_message())
    elif action == "info":
        await callback_query.message.answer(info_message())
    elif action == "send":
        await request_broadcast_message(callback_query.message, state)


    await callback_query.answer()
    LOGGER.info(f"–î–µ–π—Å—Ç–≤–∏–µ: {action}")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_handlers(dp: Dispatcher):
    dp.message.register(start_command, Command("start"))
    dp.message.register(request_broadcast_message, Command("send"))
    dp.message.register(confirm_broadcast, BroadcastStates.waiting_for_message_users)
    dp.callback_query.register(handle_callback)
